// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pojntfx/green-guardian-gateway/pkg/utils (interfaces: IoTee)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	iotee "gitlab.mi.hdm-stuttgart.de/iotee/go-iotee"
)

// MockIoTee is a mock of IoTee interface.
type MockIoTee struct {
	ctrl     *gomock.Controller
	recorder *MockIoTeeMockRecorder
}

// MockIoTeeMockRecorder is the mock recorder for MockIoTee.
type MockIoTeeMockRecorder struct {
	mock *MockIoTee
}

// NewMockIoTee creates a new mock instance.
func NewMockIoTee(ctrl *gomock.Controller) *MockIoTee {
	mock := &MockIoTee{ctrl: ctrl}
	mock.recorder = &MockIoTeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTee) EXPECT() *MockIoTeeMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIoTee) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIoTeeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIoTee)(nil).Close))
}

// Open mocks base method.
func (m *MockIoTee) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockIoTeeMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIoTee)(nil).Open))
}

// ReceiveBlocking mocks base method.
func (m *MockIoTee) ReceiveBlocking() *iotee.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveBlocking")
	ret0, _ := ret[0].(*iotee.Message)
	return ret0
}

// ReceiveBlocking indicates an expected call of ReceiveBlocking.
func (mr *MockIoTeeMockRecorder) ReceiveBlocking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveBlocking", reflect.TypeOf((*MockIoTee)(nil).ReceiveBlocking))
}

// ReceiveWithTimeout mocks base method.
func (m *MockIoTee) ReceiveWithTimeout(arg0 time.Duration) *iotee.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveWithTimeout", arg0)
	ret0, _ := ret[0].(*iotee.Message)
	return ret0
}

// ReceiveWithTimeout indicates an expected call of ReceiveWithTimeout.
func (mr *MockIoTeeMockRecorder) ReceiveWithTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveWithTimeout", reflect.TypeOf((*MockIoTee)(nil).ReceiveWithTimeout), arg0)
}

// RxChan mocks base method.
func (m *MockIoTee) RxChan() chan *iotee.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RxChan")
	ret0, _ := ret[0].(chan *iotee.Message)
	return ret0
}

// RxChan indicates an expected call of RxChan.
func (mr *MockIoTeeMockRecorder) RxChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RxChan", reflect.TypeOf((*MockIoTee)(nil).RxChan))
}

// RxPump mocks base method.
func (m *MockIoTee) RxPump() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RxPump")
}

// RxPump indicates an expected call of RxPump.
func (mr *MockIoTeeMockRecorder) RxPump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RxPump", reflect.TypeOf((*MockIoTee)(nil).RxPump))
}

// Transmit mocks base method.
func (m *MockIoTee) Transmit(arg0 *iotee.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transmit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transmit indicates an expected call of Transmit.
func (mr *MockIoTeeMockRecorder) Transmit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transmit", reflect.TypeOf((*MockIoTee)(nil).Transmit), arg0)
}
